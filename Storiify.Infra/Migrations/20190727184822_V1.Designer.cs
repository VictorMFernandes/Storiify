// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Storiify.Infra.BancoDeDados.Contexto;

namespace Storiify.Infra.Migrations
{
    [DbContext(typeof(BancoContexto))]
    [Migration("20190727184822_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Storiify.Dominio.Entidades.Historia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tb_historia");
                });

            modelBuilder.Entity("Storiify.Dominio.Entidades.Personagem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HistoriaId");

                    b.HasKey("Id");

                    b.HasIndex("HistoriaId");

                    b.ToTable("tb_personagem");
                });

            modelBuilder.Entity("Storiify.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DtCriacao");

                    b.Property<DateTime>("DtUltimaAtividade");

                    b.HasKey("Id");

                    b.ToTable("tb_usuario");
                });

            modelBuilder.Entity("Storiify.Dominio.Entidades.Historia", b =>
                {
                    b.HasOne("Storiify.Dominio.Entidades.Usuario")
                        .WithMany("Historias")
                        .HasForeignKey("UsuarioId");

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Foto", "Foto", b1 =>
                        {
                            b1.Property<string>("HistoriaId");

                            b1.Property<string>("IdPublico")
                                .HasColumnName("FotoIdPublico")
                                .HasMaxLength(25);

                            b1.Property<string>("Url")
                                .HasColumnName("FotoUrl")
                                .HasMaxLength(160);

                            b1.HasKey("HistoriaId");

                            b1.ToTable("tb_historia");

                            b1.HasOne("Storiify.Dominio.Entidades.Historia")
                                .WithOne("Foto")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Foto", "HistoriaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<string>("HistoriaId");

                            b1.Property<string>("Texto")
                                .IsRequired()
                                .HasColumnName("Nome")
                                .HasMaxLength(60);

                            b1.HasKey("HistoriaId");

                            b1.ToTable("tb_historia");

                            b1.HasOne("Storiify.Dominio.Entidades.Historia")
                                .WithOne("Nome")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Nome", "HistoriaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Storiify.Dominio.Entidades.Personagem", b =>
                {
                    b.HasOne("Storiify.Dominio.Entidades.Historia")
                        .WithMany("Personagens")
                        .HasForeignKey("HistoriaId");

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Foto", "Foto", b1 =>
                        {
                            b1.Property<string>("PersonagemId");

                            b1.Property<string>("IdPublico")
                                .HasColumnName("FotoIdPublico")
                                .HasMaxLength(25);

                            b1.Property<string>("Url")
                                .HasColumnName("FotoUrl")
                                .HasMaxLength(160);

                            b1.HasKey("PersonagemId");

                            b1.ToTable("tb_personagem");

                            b1.HasOne("Storiify.Dominio.Entidades.Personagem")
                                .WithOne("Foto")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Foto", "PersonagemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<string>("PersonagemId");

                            b1.Property<string>("Texto")
                                .IsRequired()
                                .HasColumnName("Nome")
                                .HasMaxLength(60);

                            b1.HasKey("PersonagemId");

                            b1.ToTable("tb_personagem");

                            b1.HasOne("Storiify.Dominio.Entidades.Personagem")
                                .WithOne("Nome")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Nome", "PersonagemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Storiify.Dominio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("Storiify.Dominio.ValueObjects.Autenticacao", "Autenticacao", b1 =>
                        {
                            b1.Property<string>("UsuarioId");

                            b1.Property<bool>("Ativo")
                                .HasColumnName("Ativo");

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasColumnName("Login")
                                .HasMaxLength(100);

                            b1.Property<string>("Senha")
                                .IsRequired()
                                .HasColumnName("Senha")
                                .IsFixedLength(true)
                                .HasMaxLength(32);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("tb_usuario");

                            b1.HasOne("Storiify.Dominio.Entidades.Usuario")
                                .WithOne("Autenticacao")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Autenticacao", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<string>("UsuarioId");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasMaxLength(160);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("tb_usuario");

                            b1.HasOne("Storiify.Dominio.Entidades.Usuario")
                                .WithOne("Email")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Email", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Foto", "Foto", b1 =>
                        {
                            b1.Property<string>("UsuarioId");

                            b1.Property<string>("IdPublico")
                                .HasColumnName("FotoIdPublico")
                                .HasMaxLength(25);

                            b1.Property<string>("Url")
                                .HasColumnName("FotoUrl")
                                .HasMaxLength(160);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("tb_usuario");

                            b1.HasOne("Storiify.Dominio.Entidades.Usuario")
                                .WithOne("Foto")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Foto", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Storiify.Dominio.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<string>("UsuarioId");

                            b1.Property<string>("Texto")
                                .IsRequired()
                                .HasColumnName("Nome")
                                .HasMaxLength(60);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("tb_usuario");

                            b1.HasOne("Storiify.Dominio.Entidades.Usuario")
                                .WithOne("Nome")
                                .HasForeignKey("Storiify.Dominio.ValueObjects.Nome", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
